From 723e5d63a56f83fdc341f8f290df0453d7756ed8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@googlemail.com>
Date: Tue, 16 Dec 2014 22:18:12 +0100
Subject: [PATCH 09/12] Stub down sessionrunner in x11-less environments
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Andreas MÃ¼ller <schnitzeltony@googlemail.com>
---
 runners/sessions/sessionrunner.cpp | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/runners/sessions/sessionrunner.cpp b/runners/sessions/sessionrunner.cpp
index b408ff0..a92ed51 100644
--- a/runners/sessions/sessionrunner.cpp
+++ b/runners/sessions/sessionrunner.cpp
@@ -135,6 +135,7 @@ void SessionRunner::match(Plasma::RunnerContext &context)
         return;
     }
 
+#if HAVE_X11
     // first compare with SESSIONS. this must *NOT* be translated (i18n)
     // as it is used as an internal command trigger (e.g. via d-bus),
     // not as a user supplied query. and yes, "Ugh, magic strings"
@@ -211,6 +212,7 @@ void SessionRunner::match(Plasma::RunnerContext &context)
     }
 
     context.addMatches(matches);
+#endif HAVE_X11
 }
 
 void SessionRunner::run(const Plasma::RunnerContext &context, const Plasma::QueryMatch &match)
@@ -242,6 +244,7 @@ void SessionRunner::run(const Plasma::RunnerContext &context, const Plasma::Quer
         }
     }
 
+#if HAVE_X11
     if (!match.data().toString().isEmpty()) {
         dm.lockSwitchVT(match.data().toString().toInt());
         return;
@@ -269,6 +272,12 @@ void SessionRunner::run(const Plasma::RunnerContext &context, const Plasma::Quer
 
     lock();
     dm.startReserve();
+#else
+    QMessageBox::warning(
+            0,
+            "Warning - New Session",
+            "No session support yet in non X11 environments.");
+#endif // HAVE_X11
 }
 
 void SessionRunner::lock()
-- 
1.8.3.1

